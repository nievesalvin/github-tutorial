{
  "name": "GitHub-tutorial",
  "tagline": "",
  "body": "# GitHub Tutorial\r\n\r\n_by Alvin Nieves_\r\n\r\n---\r\n## Git vs. GitHub\r\n Git is a version control software that takes \"snapshots\" of a programmers code  \r\n and keeps track of changes and modifications that have been made to the project   \r\n itself, while Github is a website where a programmer can send code to the cloud;  \r\n so that the code itself 'lives' elsewhere in addition to 'living' locally.   \r\n Github is also at the enter of social coding, where a pethora of programmers can use   \r\n eachothers' code  to brank off and use others code as a starting point to start their  \r\n own project.  \r\n \r\n In order to work Github needs git, where as Git does not need GitHub to work  \r\n hence why \"Git\" can be found in the word \"GitHub\" and why \"Github\" is  \r\n not found in \"Git.\"\r\n\r\n---\r\n## Initial Setup\r\nWhen using Git, a programmer uses `git push` to move their code from \r\na local directory to a remote repository. In order to do this, a \r\nprogrammer has to have a Github account.  \r\n\r\nTo set up a github account:\r\n* Go to [_Github_](www.github.com)\r\n* Click \"Sign Up\" and after filling out ones information click \"Create Account\"  \r\n![](start-github.png)  \r\n  \r\nAfter making a Github account and a repository a programmer can 'push'\r\ntheir code to the cloud and have it saved in more than just a local\r\ndirectory.  \r\nWhen making a github account it is important to set it \r\nup with SSH(Secure Socket Shell) so that one does not \r\nhave to constantly insert their password.  \r\n_To do this_:  \r\n* Go to \"_Your profile_\"  \r\n![](yourprofile-img.png)  \r\n* Click \"_Settings_\" and then \"_SSH and GPG Keys_\"  \r\n![](settings-img.png)  \r\n* Then copy the SSH Code and paste it to your\r\nc9 account at the SSH tab, on the gear icon \r\non the top-right of the window.\r\n\r\n---\r\n## Repository Setup\r\nAs a programmer, in order to be able to push ones code\r\nto a remote repository instead of \r\nthe code living on a single local \r\ndirectory. To be able to 'push' code\r\na 'repo' must be set up on GitHub.  \r\nIn order to set up a repository on \r\n\r\n* Go to \"_Your profile_\"  \r\n![](yourprofile-img.png)  \r\n* Click \"_Repositories_\"  \r\n![](repositories-img.png)  \r\n* Click \"_New_\"  \r\n![](new-img.png)  \r\n* Type in the name of the repository \r\nyou want to make and press \"_create_\"  \r\n![](create-img.png)  \r\n* Make sure SSH is selected and Copy and paste the code from\r\n**\"or push an existing repository from\r\nthe command line.\"**  \r\n![](pushrepo-img.png)  \r\nit should look a like this:  \r\n![](pushrepocode.png)  \r\n**Your repo is now set up!**  \r\nWhen using a repository, a programmer must\r\nremember to git init, in order to create  a \r\nlink between the remote repository and the local\r\ndirectory. After git has been initalized one \r\nshould constantly `add`,`commit`, and `push` in order\r\nto constantly update your remote repository as well as your\r\nlocal directory.\r\n\r\n\r\n\r\n\r\n---\r\n## Workflow & Commands\r\nWhen using Git one must know all of the commands and what those \r\ncommands tell the computer to do. Every command does\r\nsomething different, and there is almost always a way to reverse what one did.  \r\n\r\n##### Git Commands:\r\n1._`git init`_: creates a new repository and begins to track changes and modifications in files and folders.   \r\n```bash\r\nnievesalvin:~/workspace/practice $ git init\r\nInitialized empty Git repository in /home/ubuntu/workspace/practice/.git/\r\n```\r\n2._`git status`_: allows programmer to see what files have been modified since the last commit.  \r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n        modified:   README.md\r\n        modified:   directions.md\r\n        new file:   git-log-img.png\r\n```\r\n3._`git commit <filename> -m \"message\"`_:this is used in order to keep a record of the changes that a programmer has made to a file. When one uses\r\ngit commit, it takes a \"snapshot\" and it sets a digital checkpoint, where \r\nit shows, when your code last worked.  \r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git commit -m \"add image to git log\"\r\n[master 8329a3c] add image to git log\r\n 3 files changed, 21 insertions(+), 6 deletions(-)\r\n create mode 100644 git-log-img.png\r\n```  \r\n4._`git add`_: adds files to the \"stage\" so that the programmer can use `git commit` in order to record changes. One \r\ncan not commit before adding the files to the \"stage.\"\r\nOne can add in two different ways. The first \r\ninvolves using a '.' which simply means to add all files \r\nto the 'stage,' and the other way to include the file name\r\nafter `git add`.\r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git add .\r\n``` \r\n_Or_\r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git add -filename-\r\n```\r\n5._`git push`_: is used to send commits from the local directory to a remote \r\nrepository that lives on the cloud.  \r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git push\r\nWarning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.\r\nCounting objects: 5, done.\r\nDelta compression using up to 8 threads.\r\nCompressing objects: 100% (5/5), done.\r\nWriting objects: 100% (5/5), 48.27 KiB | 0 bytes/s, done.\r\nTotal 5 (delta 2), reused 0 (delta 0)\r\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\r\nTo github.com:nievesalvin/github-tutorial.git\r\n   b0663d4..8329a3c  master -> master\r\n```  \r\n6._`git clone`_: is used by programmers to copy files from a remote repository\r\nto a local one.  \r\n```bash\r\nnievesalvin:~/workspace/ $ git clone -repositoryurl-\r\n```\r\n7._`git diff`_: is used so that a programmer can see what specific lines of \r\ncode have been changed in a file.\r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git diff\r\ndiff --git a/README.md b/README.md\r\nindex 7d064c2..2a1d90e 100644\r\n--- a/README.md\r\n+++ b/README.md\r\n@@ -59,5 +59,5 @@ to a local one.\r\n `git diff`: is used so that a programmer can see what specific lines of \r\n code have been changed in a file.  \r\n `git log`: is used to see the number commits, author, message, and time \r\n-stamp. In order to get out of git log one must simply press 'q'\r\n+stamp. In order to get out of git log one must simply press 'q'  \r\n ![](git-log-img.png)\r\n\\ No newline at end of file\r\n```  \r\n8._`git log`_: is used to see the number commits, author, message, and time \r\nstamp. In order to get out of git log one must simply press 'q'  \r\n```bash\r\nnievesalvin:~/workspace/github-tutorial (master) $ git log\r\ncommit b0663d40a55bb4f2c75dc90ed9292f59a1b9809f\r\nAuthor: nievesalvin <alvinn4392@hstat.org>\r\nDate:   Fri Oct 21 16:02:30 2016 +0000\r\n\r\n    add image\r\n```  \r\n9._`git pull`_: is used to pull commands down \r\nfrom a repository when you have accepted someone \r\nelses pull request.\r\n#### Command Line Commands\r\n* _ls_: is short for list, and list all of the files in a directory  \r\n![](ls-img.png)\r\n* _cd -directoryname-_: cd is short for change directory and essentially it is used to \r\ntransfer a programmer from one folder to the next.  \r\n![](cd-img.png)  \r\n* _touch -filename-_: touch allows the programmer to create a new file   \r\n![](touch-img.png)\r\n* _mkdir -directoryname_: used to make a new directory  \r\n![](mkdir-img.png)  \r\n* _rm_: can be used by itself, as `rm -rf`, or `rmdir` in order to delete\r\nfiles or directories with or without force.  \r\n![](rm-img.png)  \r\n![](rmrf-img.png)  \r\n\r\n## Error Handling \r\nWhen using git one might forget to change into a\r\ndirectory before doing `git init`, which would \r\nleave you with the workspace initalized.  \r\n**Error**: ![](initerror.png)  \r\n**Correction**: ![](initcorrection.png)  \r\nWith this error, it is best to use `ls` to see\r\nwhere the `.git` is, and then use `rm -rf .git`.  \r\n_Breakdown_:\r\n`rm`: stands for remove  \r\n`-rf`: stands for 'repeat' with 'force' hence the \r\n'rf'  \r\n`.git`: stands for the file that is created when\r\ngit init is entered.  \r\n\r\nA programmer can also remove a repository in both\r\na remote or local location. And it does not matter\r\nwhich you remove first.  \r\n_Removing a local directory_:  \r\n* The first way of removing a local directory is \r\nto do.  \r\n![](rmdir-img.png)  \r\n*The second way of removing a local directory is \r\nto do.   \r\n![](rmdirectoriesrf.png)  \r\n\r\n**In order to remove a remote repository, the \r\nprogrammer must go to their [github](www.github.com) account.**  \r\n  \r\n* Click \"Your profile\"  \r\n![](yourprofile-img.png)  \r\n* Click \"repositories\"  \r\n![](repositories-img.png)  \r\n* Click on the repository you would like to select.  \r\n* Click on \"Settings\"  \r\n![](reposetting.png)  \r\n* Scroll down until you see \"Danger zone and \r\n* click Delete Repository\"  \r\n![](deleterepo.png)  \r\n\r\n## Collaboration  \r\nGithub is at the core of social coding and it does\r\nby allowing individuals to use others repositories\r\nas their own starting places in order to create \r\ntheir own version or their own project. In order \r\nto do this, a programmer has to 'fork' a persons \r\nproject and then 'clone' it. The concept of \r\nforking, is to take someones remote repository\r\nand making a copy that can be edited by the \r\nnew programmer. The concept of Cloning is taking\r\ncode from the repository that you forked and \r\ncopying it into the local directory so that \r\nchanges can be applied and 'pushed.'  \r\n\r\n#### _**Forking**_:  \r\n* Find someone elses repository that you would \r\nlike to use as your starting point, on Github.  \r\n* Once you have found a repo, clicl on it and \r\npress \"fork\"  \r\n![](fork-img.png)  \r\n* After you fork it, Github automatically makes\r\na repository under your account.   \r\n\r\n#### _**Cloning**_:\r\n* Press \"Clone or download\"  \r\n![](clonedownload-img.png)  \r\n* Once you have done this you should see this:  \r\n![](clonelink.png)  \r\nafter press the keyboard and return to c9.  \r\n* Return to the bash terminal and type  \r\n`git clone -url-`  \r\n* It should look like this:  \r\n![](gitclonelink.png)  \r\n\r\n**Congratulations you have forked and cloned a \r\nrepository!**  \r\n\r\n#### _**Pull Request**_:  \r\nPull request, is basically asking a programmer \r\npermission to change the code on the repository\r\nin which you copied the code from. Permission can \r\neither be granted or denied.  \r\n* The way to do this is to go to the repository that\r\nyou forked and click on the \"Pull request\" button:  \r\n![](pullrequest.png)  \r\n* After this you will need to wait to have it \r\napproved or denied.  \r\n* If your request is accepted, the original \r\n* programmer will then use `git pull` to copy the \r\nchanges that have been made to their remote \r\nrepository. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}